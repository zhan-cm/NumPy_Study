###一维数组切片
'''
对于一维数组来说，它类似于一条直线，其上的坐标位置用一个数字就可以表示。
例如，对于一个长度为5的一维数组arr = [1, 2, 3, 4, 5]，我们可以用数字0到4来表示它的每一个位置。
当我们使用切片操作时，就可以通过指定起始位置和结束位置来获取数组中的一部分元素。
例如，如果我们想要获取从索引1到索引3的元素，可以使用切片操作arr[1:4]，结果为[2, 3, 4]。
需要注意的是，切片操作是左闭右开的，即包括起始位置，但不包括结束位置
'''
import numpy as np
arr = np.array([1,2,3,4,5])
print(arr[1:4])


###多维数组切片
import numpy as np
data1=[1,2,3,4,5]
data2=[6,7,8,9,10]
data3=[11,12,13,14,15]
data4=[16,17,18,19,20]
data5=[21,22,23,24,25]
data6=[26,27,28,29,30]
data=np.array([[data1,data2,data3],[data4,data5,data6]])
print(data.shape)
print(data)
print()

###行切片
print("行切片")
'''
假设我们现在只想取前面两行，那我们应该怎么做呢？
思路：我们先取第一维数据
'''
print("---------------------------")
print(data[0:1])
print()
print("---------------------------")
'''
现在它现在是不是就被分解成一个2维数组，我们再对这个2维数组进行操作，
要想取这个2维数组前面两行，代码是啥呢？是不是就是data[0:2],那我们结合第一步的代码，应该怎么做呢？
'''
print(data[0:1,0:2])
print()
print("---------------------------")

###列切片
print("列切片")
print(data[:,])
print()
print("---------------------------")
print(data[:,:])
print()
print("---------------------------")
print(data[:,:,0:2])
print()
